import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
  Sql,
  Decimal,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }
export { Decimal }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw, Sql }

/**
 * Prisma Client JS version: 2.11.0
 * Query Engine version: 58369335532e47bdcec77a2f1e7c1fb83a463918
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;

declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  postgres?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'findFirst'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'


/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<T>;
  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']
  /**
   * @deprecated renamed to `$transaction`
   */
  transaction: PromiseConstructor['all']

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): UserDelegate;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): ProjectDelegate;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): TaskDelegate;

  /**
   * `prisma.documents`: Exposes CRUD operations for the **Documents** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.documents.findMany()
    * ```
    */
  get documents(): DocumentsDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const ModelName: {
  User: 'User',
  Project: 'Project',
  Task: 'Task',
  Documents: 'Documents'
};

export declare type ModelName = (typeof ModelName)[keyof typeof ModelName]


export declare const UserDistinctFieldEnum: {
  createdAt: 'createdAt',
  firstName: 'firstName',
  id: 'id',
  lastName: 'lastName',
  password: 'password',
  roles: 'roles',
  updatedAt: 'updatedAt',
  username: 'username'
};

export declare type UserDistinctFieldEnum = (typeof UserDistinctFieldEnum)[keyof typeof UserDistinctFieldEnum]


export declare const ProjectDistinctFieldEnum: {
  createdAt: 'createdAt',
  description: 'description',
  dueDate: 'dueDate',
  id: 'id',
  name: 'name',
  startDate: 'startDate',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

export declare type ProjectDistinctFieldEnum = (typeof ProjectDistinctFieldEnum)[keyof typeof ProjectDistinctFieldEnum]


export declare const TaskDistinctFieldEnum: {
  createdAt: 'createdAt',
  estimation: 'estimation',
  id: 'id',
  startDate: 'startDate',
  status: 'status',
  title: 'title',
  updatedAt: 'updatedAt',
  userId: 'userId',
  projectId: 'projectId'
};

export declare type TaskDistinctFieldEnum = (typeof TaskDistinctFieldEnum)[keyof typeof TaskDistinctFieldEnum]


export declare const DocumentsDistinctFieldEnum: {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt'
};

export declare type DocumentsDistinctFieldEnum = (typeof DocumentsDistinctFieldEnum)[keyof typeof DocumentsDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export declare const EnumStatus: {
  new: 'new',
  pending: 'pending',
  onHold: 'onHold',
  ongoing: 'ongoing',
  done: 'done'
};

export declare type EnumStatus = (typeof EnumStatus)[keyof typeof EnumStatus]


export declare const QueryMode: {
  default: 'default',
  insensitive: 'insensitive'
};

export declare type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]



/**
 * Model User
 */

export type User = {
  createdAt: Date
  firstName: string | null
  id: string
  lastName: string | null
  password: string
  roles: string[]
  updatedAt: Date
  username: string
}


export type AggregateUser = {
  count: number
}



export type AggregateUserArgs = {
  where?: UserWhereInput
  orderBy?: XOR<Enumerable<UserOrderByInput>, UserOrderByInput>
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
  count?: true
}

export type GetUserAggregateType<T extends AggregateUserArgs> = {
  [P in keyof T]: P extends 'count' ? number : never
}


    
    

export type UserSelect = {
  createdAt?: boolean
  firstName?: boolean
  id?: boolean
  lastName?: boolean
  password?: boolean
  roles?: boolean
  updatedAt?: boolean
  username?: boolean
  Project?: boolean | FindManyProjectArgs
  Task?: boolean | FindManyTaskArgs
}

export type UserInclude = {
  Project?: boolean | FindManyProjectArgs
  Task?: boolean | FindManyTaskArgs
}

export type UserGetPayload<
  S extends boolean | null | undefined | UserArgs,
  U = keyof S
> = S extends true
  ? User
  : S extends undefined
  ? never
  : S extends UserArgs | FindManyUserArgs
  ? 'include' extends U
    ? User  & {
      [P in TrueKeys<S['include']>]:
      P extends 'Project'
      ? Array<ProjectGetPayload<S['include'][P]>> :
      P extends 'Task'
      ? Array<TaskGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof User ? User[P]
: 
      P extends 'Project'
      ? Array<ProjectGetPayload<S['select'][P]>> :
      P extends 'Task'
      ? Array<TaskGetPayload<S['select'][P]>> : never
    }
  : User
: User


export interface UserDelegate {
  /**
   * Find zero or one User that matches the filter.
   * @param {FindOneUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUserArgs>(
    args: Subset<T, FindOneUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
  /**
   * Find the first User that matches the filter.
   * @param {FindFirstUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstUserArgs>(
    args?: Subset<T, FindFirstUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
  /**
   * Find zero or more Users that matches the filter.
   * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `createdAt`
   * const userWithCreatedAtOnly = await prisma.user.findMany({ select: { createdAt: true } })
   * 
  **/
  findMany<T extends FindManyUserArgs>(
    args?: Subset<T, FindManyUserArgs>
  ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>
  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const User = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
  **/
  create<T extends UserCreateArgs>(
    args: Subset<T, UserCreateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const User = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
  **/
  delete<T extends UserDeleteArgs>(
    args: Subset<T, UserDeleteArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends UserUpdateArgs>(
    args: Subset<T, UserUpdateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends UserDeleteManyArgs>(
    args: Subset<T, UserDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Users.
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends UserUpdateManyArgs>(
    args: Subset<T, UserUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
  **/
  upsert<T extends UserUpsertArgs>(
    args: Subset<T, UserUpsertArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for User.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__UserClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  Project<T extends FindManyProjectArgs = {}>(args?: Subset<T, FindManyProjectArgs>): CheckSelect<T, Promise<Array<Project>>, Promise<Array<ProjectGetPayload<T>>>>;

  Task<T extends FindManyTaskArgs = {}>(args?: Subset<T, FindManyTaskArgs>): CheckSelect<T, Promise<Array<Task>>, Promise<Array<TaskGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * User findOne
 */
export type FindOneUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: XOR<UserSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<UserInclude, null>
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}


/**
 * User findFirst
 */
export type FindFirstUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: XOR<UserSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<UserInclude, null>
  /**
   * Filter, which User to fetch.
  **/
  where?: UserWhereInput
  orderBy?: XOR<Enumerable<UserOrderByInput>, UserOrderByInput>
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User findMany
 */
export type FindManyUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: XOR<UserSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<UserInclude, null>
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: XOR<Enumerable<UserOrderByInput>, UserOrderByInput>
  /**
   * Sets the position for listing Users.
  **/
  cursor?: UserWhereUniqueInput
  /**
   * The number of Users to fetch. If negative number, it will take Users before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Users.
  **/
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User create
 */
export type UserCreateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: XOR<UserSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<UserInclude, null>
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}


/**
 * User update
 */
export type UserUpdateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: XOR<UserSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<UserInclude, null>
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}


/**
 * User updateMany
 */
export type UserUpdateManyArgs = {
  data: UserUpdateManyMutationInput
  where?: UserWhereInput
}


/**
 * User upsert
 */
export type UserUpsertArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: XOR<UserSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<UserInclude, null>
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the `where` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided `where` argument, update it with this data.
  **/
  update: UserUpdateInput
}


/**
 * User delete
 */
export type UserDeleteArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: XOR<UserSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<UserInclude, null>
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}


/**
 * User deleteMany
 */
export type UserDeleteManyArgs = {
  where?: UserWhereInput
}


/**
 * User without action
 */
export type UserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: XOR<UserSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<UserInclude, null>
}



/**
 * Model Project
 */

export type Project = {
  createdAt: Date
  description: string | null
  dueDate: Date | null
  id: string
  name: string | null
  startDate: Date | null
  updatedAt: Date
  userId: string
}


export type AggregateProject = {
  count: number
}



export type AggregateProjectArgs = {
  where?: ProjectWhereInput
  orderBy?: XOR<Enumerable<ProjectOrderByInput>, ProjectOrderByInput>
  cursor?: ProjectWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ProjectDistinctFieldEnum>
  count?: true
}

export type GetProjectAggregateType<T extends AggregateProjectArgs> = {
  [P in keyof T]: P extends 'count' ? number : never
}


    
    

export type ProjectSelect = {
  createdAt?: boolean
  description?: boolean
  dueDate?: boolean
  id?: boolean
  name?: boolean
  owner?: boolean | UserArgs
  startDate?: boolean
  updatedAt?: boolean
  Task?: boolean | FindManyTaskArgs
  userId?: boolean
}

export type ProjectInclude = {
  owner?: boolean | UserArgs
  Task?: boolean | FindManyTaskArgs
}

export type ProjectGetPayload<
  S extends boolean | null | undefined | ProjectArgs,
  U = keyof S
> = S extends true
  ? Project
  : S extends undefined
  ? never
  : S extends ProjectArgs | FindManyProjectArgs
  ? 'include' extends U
    ? Project  & {
      [P in TrueKeys<S['include']>]:
      P extends 'owner'
      ? UserGetPayload<S['include'][P]> :
      P extends 'Task'
      ? Array<TaskGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Project ? Project[P]
: 
      P extends 'owner'
      ? UserGetPayload<S['select'][P]> :
      P extends 'Task'
      ? Array<TaskGetPayload<S['select'][P]>> : never
    }
  : Project
: Project


export interface ProjectDelegate {
  /**
   * Find zero or one Project that matches the filter.
   * @param {FindOneProjectArgs} args - Arguments to find a Project
   * @example
   * // Get one Project
   * const project = await prisma.project.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneProjectArgs>(
    args: Subset<T, FindOneProjectArgs>
  ): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>
  /**
   * Find the first Project that matches the filter.
   * @param {FindFirstProjectArgs} args - Arguments to find a Project
   * @example
   * // Get one Project
   * const project = await prisma.project.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstProjectArgs>(
    args?: Subset<T, FindFirstProjectArgs>
  ): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>
  /**
   * Find zero or more Projects that matches the filter.
   * @param {FindManyProjectArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Projects
   * const projects = await prisma.project.findMany()
   * 
   * // Get first 10 Projects
   * const projects = await prisma.project.findMany({ take: 10 })
   * 
   * // Only select the `createdAt`
   * const projectWithCreatedAtOnly = await prisma.project.findMany({ select: { createdAt: true } })
   * 
  **/
  findMany<T extends FindManyProjectArgs>(
    args?: Subset<T, FindManyProjectArgs>
  ): CheckSelect<T, Promise<Array<Project>>, Promise<Array<ProjectGetPayload<T>>>>
  /**
   * Create a Project.
   * @param {ProjectCreateArgs} args - Arguments to create a Project.
   * @example
   * // Create one Project
   * const Project = await prisma.project.create({
   *   data: {
   *     // ... data to create a Project
   *   }
   * })
   * 
  **/
  create<T extends ProjectCreateArgs>(
    args: Subset<T, ProjectCreateArgs>
  ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>
  /**
   * Delete a Project.
   * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
   * @example
   * // Delete one Project
   * const Project = await prisma.project.delete({
   *   where: {
   *     // ... filter to delete one Project
   *   }
   * })
   * 
  **/
  delete<T extends ProjectDeleteArgs>(
    args: Subset<T, ProjectDeleteArgs>
  ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>
  /**
   * Update one Project.
   * @param {ProjectUpdateArgs} args - Arguments to update one Project.
   * @example
   * // Update one Project
   * const project = await prisma.project.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ProjectUpdateArgs>(
    args: Subset<T, ProjectUpdateArgs>
  ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>
  /**
   * Delete zero or more Projects.
   * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
   * @example
   * // Delete a few Projects
   * const { count } = await prisma.project.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ProjectDeleteManyArgs>(
    args: Subset<T, ProjectDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Projects.
   * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Projects
   * const project = await prisma.project.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ProjectUpdateManyArgs>(
    args: Subset<T, ProjectUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Project.
   * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
   * @example
   * // Update or create a Project
   * const project = await prisma.project.upsert({
   *   create: {
   *     // ... data to create a Project
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Project we want to update
   *   }
   * })
  **/
  upsert<T extends ProjectUpsertArgs>(
    args: Subset<T, ProjectUpsertArgs>
  ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyProjectArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateProjectArgs>(args: Subset<T, AggregateProjectArgs>): Promise<GetProjectAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Project.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ProjectClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  owner<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  Task<T extends FindManyTaskArgs = {}>(args?: Subset<T, FindManyTaskArgs>): CheckSelect<T, Promise<Array<Task>>, Promise<Array<TaskGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Project findOne
 */
export type FindOneProjectArgs = {
  /**
   * Select specific fields to fetch from the Project
  **/
  select?: XOR<ProjectSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ProjectInclude, null>
  /**
   * Filter, which Project to fetch.
  **/
  where: ProjectWhereUniqueInput
}


/**
 * Project findFirst
 */
export type FindFirstProjectArgs = {
  /**
   * Select specific fields to fetch from the Project
  **/
  select?: XOR<ProjectSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ProjectInclude, null>
  /**
   * Filter, which Project to fetch.
  **/
  where?: ProjectWhereInput
  orderBy?: XOR<Enumerable<ProjectOrderByInput>, ProjectOrderByInput>
  cursor?: ProjectWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ProjectDistinctFieldEnum>
}


/**
 * Project findMany
 */
export type FindManyProjectArgs = {
  /**
   * Select specific fields to fetch from the Project
  **/
  select?: XOR<ProjectSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ProjectInclude, null>
  /**
   * Filter, which Projects to fetch.
  **/
  where?: ProjectWhereInput
  /**
   * Determine the order of the Projects to fetch.
  **/
  orderBy?: XOR<Enumerable<ProjectOrderByInput>, ProjectOrderByInput>
  /**
   * Sets the position for listing Projects.
  **/
  cursor?: ProjectWhereUniqueInput
  /**
   * The number of Projects to fetch. If negative number, it will take Projects before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Projects.
  **/
  skip?: number
  distinct?: Enumerable<ProjectDistinctFieldEnum>
}


/**
 * Project create
 */
export type ProjectCreateArgs = {
  /**
   * Select specific fields to fetch from the Project
  **/
  select?: XOR<ProjectSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ProjectInclude, null>
  /**
   * The data needed to create a Project.
  **/
  data: ProjectCreateInput
}


/**
 * Project update
 */
export type ProjectUpdateArgs = {
  /**
   * Select specific fields to fetch from the Project
  **/
  select?: XOR<ProjectSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ProjectInclude, null>
  /**
   * The data needed to update a Project.
  **/
  data: ProjectUpdateInput
  /**
   * Choose, which Project to update.
  **/
  where: ProjectWhereUniqueInput
}


/**
 * Project updateMany
 */
export type ProjectUpdateManyArgs = {
  data: ProjectUpdateManyMutationInput
  where?: ProjectWhereInput
}


/**
 * Project upsert
 */
export type ProjectUpsertArgs = {
  /**
   * Select specific fields to fetch from the Project
  **/
  select?: XOR<ProjectSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ProjectInclude, null>
  /**
   * The filter to search for the Project to update in case it exists.
  **/
  where: ProjectWhereUniqueInput
  /**
   * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
  **/
  create: ProjectCreateInput
  /**
   * In case the Project was found with the provided `where` argument, update it with this data.
  **/
  update: ProjectUpdateInput
}


/**
 * Project delete
 */
export type ProjectDeleteArgs = {
  /**
   * Select specific fields to fetch from the Project
  **/
  select?: XOR<ProjectSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ProjectInclude, null>
  /**
   * Filter which Project to delete.
  **/
  where: ProjectWhereUniqueInput
}


/**
 * Project deleteMany
 */
export type ProjectDeleteManyArgs = {
  where?: ProjectWhereInput
}


/**
 * Project without action
 */
export type ProjectArgs = {
  /**
   * Select specific fields to fetch from the Project
  **/
  select?: XOR<ProjectSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ProjectInclude, null>
}



/**
 * Model Task
 */

export type Task = {
  createdAt: Date
  estimation: number | null
  id: string
  startDate: Date
  status: EnumStatus
  title: string
  updatedAt: Date
  userId: string | null
  projectId: string
}


export type AggregateTask = {
  count: number
  avg: TaskAvgAggregateOutputType | null
  sum: TaskSumAggregateOutputType | null
  min: TaskMinAggregateOutputType | null
  max: TaskMaxAggregateOutputType | null
}

export type TaskAvgAggregateOutputType = {
  estimation: number | null
}

export type TaskSumAggregateOutputType = {
  estimation: number | null
}

export type TaskMinAggregateOutputType = {
  estimation: number | null
}

export type TaskMaxAggregateOutputType = {
  estimation: number | null
}


export type TaskAvgAggregateInputType = {
  estimation?: true
}

export type TaskSumAggregateInputType = {
  estimation?: true
}

export type TaskMinAggregateInputType = {
  estimation?: true
}

export type TaskMaxAggregateInputType = {
  estimation?: true
}

export type AggregateTaskArgs = {
  where?: TaskWhereInput
  orderBy?: XOR<Enumerable<TaskOrderByInput>, TaskOrderByInput>
  cursor?: TaskWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<TaskDistinctFieldEnum>
  count?: true
  avg?: TaskAvgAggregateInputType
  sum?: TaskSumAggregateInputType
  min?: TaskMinAggregateInputType
  max?: TaskMaxAggregateInputType
}

export type GetTaskAggregateType<T extends AggregateTaskArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetTaskAggregateScalarType<T[P]>
}

export type GetTaskAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof TaskAvgAggregateOutputType ? TaskAvgAggregateOutputType[P] : never
}
    
    

export type TaskSelect = {
  assignedTo?: boolean | UserArgs
  createdAt?: boolean
  estimation?: boolean
  id?: boolean
  project?: boolean | ProjectArgs
  startDate?: boolean
  status?: boolean
  title?: boolean
  updatedAt?: boolean
  userId?: boolean
  projectId?: boolean
}

export type TaskInclude = {
  assignedTo?: boolean | UserArgs
  project?: boolean | ProjectArgs
}

export type TaskGetPayload<
  S extends boolean | null | undefined | TaskArgs,
  U = keyof S
> = S extends true
  ? Task
  : S extends undefined
  ? never
  : S extends TaskArgs | FindManyTaskArgs
  ? 'include' extends U
    ? Task  & {
      [P in TrueKeys<S['include']>]:
      P extends 'assignedTo'
      ? UserGetPayload<S['include'][P]> | null :
      P extends 'project'
      ? ProjectGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Task ? Task[P]
: 
      P extends 'assignedTo'
      ? UserGetPayload<S['select'][P]> | null :
      P extends 'project'
      ? ProjectGetPayload<S['select'][P]> : never
    }
  : Task
: Task


export interface TaskDelegate {
  /**
   * Find zero or one Task that matches the filter.
   * @param {FindOneTaskArgs} args - Arguments to find a Task
   * @example
   * // Get one Task
   * const task = await prisma.task.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneTaskArgs>(
    args: Subset<T, FindOneTaskArgs>
  ): CheckSelect<T, Prisma__TaskClient<Task | null>, Prisma__TaskClient<TaskGetPayload<T> | null>>
  /**
   * Find the first Task that matches the filter.
   * @param {FindFirstTaskArgs} args - Arguments to find a Task
   * @example
   * // Get one Task
   * const task = await prisma.task.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstTaskArgs>(
    args?: Subset<T, FindFirstTaskArgs>
  ): CheckSelect<T, Prisma__TaskClient<Task | null>, Prisma__TaskClient<TaskGetPayload<T> | null>>
  /**
   * Find zero or more Tasks that matches the filter.
   * @param {FindManyTaskArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tasks
   * const tasks = await prisma.task.findMany()
   * 
   * // Get first 10 Tasks
   * const tasks = await prisma.task.findMany({ take: 10 })
   * 
   * // Only select the `createdAt`
   * const taskWithCreatedAtOnly = await prisma.task.findMany({ select: { createdAt: true } })
   * 
  **/
  findMany<T extends FindManyTaskArgs>(
    args?: Subset<T, FindManyTaskArgs>
  ): CheckSelect<T, Promise<Array<Task>>, Promise<Array<TaskGetPayload<T>>>>
  /**
   * Create a Task.
   * @param {TaskCreateArgs} args - Arguments to create a Task.
   * @example
   * // Create one Task
   * const Task = await prisma.task.create({
   *   data: {
   *     // ... data to create a Task
   *   }
   * })
   * 
  **/
  create<T extends TaskCreateArgs>(
    args: Subset<T, TaskCreateArgs>
  ): CheckSelect<T, Prisma__TaskClient<Task>, Prisma__TaskClient<TaskGetPayload<T>>>
  /**
   * Delete a Task.
   * @param {TaskDeleteArgs} args - Arguments to delete one Task.
   * @example
   * // Delete one Task
   * const Task = await prisma.task.delete({
   *   where: {
   *     // ... filter to delete one Task
   *   }
   * })
   * 
  **/
  delete<T extends TaskDeleteArgs>(
    args: Subset<T, TaskDeleteArgs>
  ): CheckSelect<T, Prisma__TaskClient<Task>, Prisma__TaskClient<TaskGetPayload<T>>>
  /**
   * Update one Task.
   * @param {TaskUpdateArgs} args - Arguments to update one Task.
   * @example
   * // Update one Task
   * const task = await prisma.task.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends TaskUpdateArgs>(
    args: Subset<T, TaskUpdateArgs>
  ): CheckSelect<T, Prisma__TaskClient<Task>, Prisma__TaskClient<TaskGetPayload<T>>>
  /**
   * Delete zero or more Tasks.
   * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
   * @example
   * // Delete a few Tasks
   * const { count } = await prisma.task.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends TaskDeleteManyArgs>(
    args: Subset<T, TaskDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Tasks.
   * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tasks
   * const task = await prisma.task.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends TaskUpdateManyArgs>(
    args: Subset<T, TaskUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Task.
   * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
   * @example
   * // Update or create a Task
   * const task = await prisma.task.upsert({
   *   create: {
   *     // ... data to create a Task
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Task we want to update
   *   }
   * })
  **/
  upsert<T extends TaskUpsertArgs>(
    args: Subset<T, TaskUpsertArgs>
  ): CheckSelect<T, Prisma__TaskClient<Task>, Prisma__TaskClient<TaskGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyTaskArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateTaskArgs>(args: Subset<T, AggregateTaskArgs>): Promise<GetTaskAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Task.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__TaskClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  assignedTo<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  project<T extends ProjectArgs = {}>(args?: Subset<T, ProjectArgs>): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Task findOne
 */
export type FindOneTaskArgs = {
  /**
   * Select specific fields to fetch from the Task
  **/
  select?: XOR<TaskSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TaskInclude, null>
  /**
   * Filter, which Task to fetch.
  **/
  where: TaskWhereUniqueInput
}


/**
 * Task findFirst
 */
export type FindFirstTaskArgs = {
  /**
   * Select specific fields to fetch from the Task
  **/
  select?: XOR<TaskSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TaskInclude, null>
  /**
   * Filter, which Task to fetch.
  **/
  where?: TaskWhereInput
  orderBy?: XOR<Enumerable<TaskOrderByInput>, TaskOrderByInput>
  cursor?: TaskWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<TaskDistinctFieldEnum>
}


/**
 * Task findMany
 */
export type FindManyTaskArgs = {
  /**
   * Select specific fields to fetch from the Task
  **/
  select?: XOR<TaskSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TaskInclude, null>
  /**
   * Filter, which Tasks to fetch.
  **/
  where?: TaskWhereInput
  /**
   * Determine the order of the Tasks to fetch.
  **/
  orderBy?: XOR<Enumerable<TaskOrderByInput>, TaskOrderByInput>
  /**
   * Sets the position for listing Tasks.
  **/
  cursor?: TaskWhereUniqueInput
  /**
   * The number of Tasks to fetch. If negative number, it will take Tasks before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Tasks.
  **/
  skip?: number
  distinct?: Enumerable<TaskDistinctFieldEnum>
}


/**
 * Task create
 */
export type TaskCreateArgs = {
  /**
   * Select specific fields to fetch from the Task
  **/
  select?: XOR<TaskSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TaskInclude, null>
  /**
   * The data needed to create a Task.
  **/
  data: TaskCreateInput
}


/**
 * Task update
 */
export type TaskUpdateArgs = {
  /**
   * Select specific fields to fetch from the Task
  **/
  select?: XOR<TaskSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TaskInclude, null>
  /**
   * The data needed to update a Task.
  **/
  data: TaskUpdateInput
  /**
   * Choose, which Task to update.
  **/
  where: TaskWhereUniqueInput
}


/**
 * Task updateMany
 */
export type TaskUpdateManyArgs = {
  data: TaskUpdateManyMutationInput
  where?: TaskWhereInput
}


/**
 * Task upsert
 */
export type TaskUpsertArgs = {
  /**
   * Select specific fields to fetch from the Task
  **/
  select?: XOR<TaskSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TaskInclude, null>
  /**
   * The filter to search for the Task to update in case it exists.
  **/
  where: TaskWhereUniqueInput
  /**
   * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
  **/
  create: TaskCreateInput
  /**
   * In case the Task was found with the provided `where` argument, update it with this data.
  **/
  update: TaskUpdateInput
}


/**
 * Task delete
 */
export type TaskDeleteArgs = {
  /**
   * Select specific fields to fetch from the Task
  **/
  select?: XOR<TaskSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TaskInclude, null>
  /**
   * Filter which Task to delete.
  **/
  where: TaskWhereUniqueInput
}


/**
 * Task deleteMany
 */
export type TaskDeleteManyArgs = {
  where?: TaskWhereInput
}


/**
 * Task without action
 */
export type TaskArgs = {
  /**
   * Select specific fields to fetch from the Task
  **/
  select?: XOR<TaskSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TaskInclude, null>
}



/**
 * Model Documents
 */

export type Documents = {
  createdAt: Date
  id: string
  updatedAt: Date
}


export type AggregateDocuments = {
  count: number
}



export type AggregateDocumentsArgs = {
  where?: DocumentsWhereInput
  orderBy?: XOR<Enumerable<DocumentsOrderByInput>, DocumentsOrderByInput>
  cursor?: DocumentsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<DocumentsDistinctFieldEnum>
  count?: true
}

export type GetDocumentsAggregateType<T extends AggregateDocumentsArgs> = {
  [P in keyof T]: P extends 'count' ? number : never
}


    
    

export type DocumentsSelect = {
  createdAt?: boolean
  id?: boolean
  updatedAt?: boolean
}

export type DocumentsGetPayload<
  S extends boolean | null | undefined | DocumentsArgs,
  U = keyof S
> = S extends true
  ? Documents
  : S extends undefined
  ? never
  : S extends DocumentsArgs | FindManyDocumentsArgs
  ? 'include' extends U
    ? Documents 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Documents ? Documents[P]
: 
 never
    }
  : Documents
: Documents


export interface DocumentsDelegate {
  /**
   * Find zero or one Documents that matches the filter.
   * @param {FindOneDocumentsArgs} args - Arguments to find a Documents
   * @example
   * // Get one Documents
   * const documents = await prisma.documents.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneDocumentsArgs>(
    args: Subset<T, FindOneDocumentsArgs>
  ): CheckSelect<T, Prisma__DocumentsClient<Documents | null>, Prisma__DocumentsClient<DocumentsGetPayload<T> | null>>
  /**
   * Find the first Documents that matches the filter.
   * @param {FindFirstDocumentsArgs} args - Arguments to find a Documents
   * @example
   * // Get one Documents
   * const documents = await prisma.documents.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstDocumentsArgs>(
    args?: Subset<T, FindFirstDocumentsArgs>
  ): CheckSelect<T, Prisma__DocumentsClient<Documents | null>, Prisma__DocumentsClient<DocumentsGetPayload<T> | null>>
  /**
   * Find zero or more Documents that matches the filter.
   * @param {FindManyDocumentsArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Documents
   * const documents = await prisma.documents.findMany()
   * 
   * // Get first 10 Documents
   * const documents = await prisma.documents.findMany({ take: 10 })
   * 
   * // Only select the `createdAt`
   * const documentsWithCreatedAtOnly = await prisma.documents.findMany({ select: { createdAt: true } })
   * 
  **/
  findMany<T extends FindManyDocumentsArgs>(
    args?: Subset<T, FindManyDocumentsArgs>
  ): CheckSelect<T, Promise<Array<Documents>>, Promise<Array<DocumentsGetPayload<T>>>>
  /**
   * Create a Documents.
   * @param {DocumentsCreateArgs} args - Arguments to create a Documents.
   * @example
   * // Create one Documents
   * const Documents = await prisma.documents.create({
   *   data: {
   *     // ... data to create a Documents
   *   }
   * })
   * 
  **/
  create<T extends DocumentsCreateArgs>(
    args: Subset<T, DocumentsCreateArgs>
  ): CheckSelect<T, Prisma__DocumentsClient<Documents>, Prisma__DocumentsClient<DocumentsGetPayload<T>>>
  /**
   * Delete a Documents.
   * @param {DocumentsDeleteArgs} args - Arguments to delete one Documents.
   * @example
   * // Delete one Documents
   * const Documents = await prisma.documents.delete({
   *   where: {
   *     // ... filter to delete one Documents
   *   }
   * })
   * 
  **/
  delete<T extends DocumentsDeleteArgs>(
    args: Subset<T, DocumentsDeleteArgs>
  ): CheckSelect<T, Prisma__DocumentsClient<Documents>, Prisma__DocumentsClient<DocumentsGetPayload<T>>>
  /**
   * Update one Documents.
   * @param {DocumentsUpdateArgs} args - Arguments to update one Documents.
   * @example
   * // Update one Documents
   * const documents = await prisma.documents.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends DocumentsUpdateArgs>(
    args: Subset<T, DocumentsUpdateArgs>
  ): CheckSelect<T, Prisma__DocumentsClient<Documents>, Prisma__DocumentsClient<DocumentsGetPayload<T>>>
  /**
   * Delete zero or more Documents.
   * @param {DocumentsDeleteManyArgs} args - Arguments to filter Documents to delete.
   * @example
   * // Delete a few Documents
   * const { count } = await prisma.documents.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends DocumentsDeleteManyArgs>(
    args: Subset<T, DocumentsDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Documents.
   * @param {DocumentsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Documents
   * const documents = await prisma.documents.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends DocumentsUpdateManyArgs>(
    args: Subset<T, DocumentsUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Documents.
   * @param {DocumentsUpsertArgs} args - Arguments to update or create a Documents.
   * @example
   * // Update or create a Documents
   * const documents = await prisma.documents.upsert({
   *   create: {
   *     // ... data to create a Documents
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Documents we want to update
   *   }
   * })
  **/
  upsert<T extends DocumentsUpsertArgs>(
    args: Subset<T, DocumentsUpsertArgs>
  ): CheckSelect<T, Prisma__DocumentsClient<Documents>, Prisma__DocumentsClient<DocumentsGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyDocumentsArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateDocumentsArgs>(args: Subset<T, AggregateDocumentsArgs>): Promise<GetDocumentsAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Documents.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__DocumentsClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Documents findOne
 */
export type FindOneDocumentsArgs = {
  /**
   * Select specific fields to fetch from the Documents
  **/
  select?: XOR<DocumentsSelect, null>
  /**
   * Filter, which Documents to fetch.
  **/
  where: DocumentsWhereUniqueInput
}


/**
 * Documents findFirst
 */
export type FindFirstDocumentsArgs = {
  /**
   * Select specific fields to fetch from the Documents
  **/
  select?: XOR<DocumentsSelect, null>
  /**
   * Filter, which Documents to fetch.
  **/
  where?: DocumentsWhereInput
  orderBy?: XOR<Enumerable<DocumentsOrderByInput>, DocumentsOrderByInput>
  cursor?: DocumentsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<DocumentsDistinctFieldEnum>
}


/**
 * Documents findMany
 */
export type FindManyDocumentsArgs = {
  /**
   * Select specific fields to fetch from the Documents
  **/
  select?: XOR<DocumentsSelect, null>
  /**
   * Filter, which Documents to fetch.
  **/
  where?: DocumentsWhereInput
  /**
   * Determine the order of the Documents to fetch.
  **/
  orderBy?: XOR<Enumerable<DocumentsOrderByInput>, DocumentsOrderByInput>
  /**
   * Sets the position for listing Documents.
  **/
  cursor?: DocumentsWhereUniqueInput
  /**
   * The number of Documents to fetch. If negative number, it will take Documents before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Documents.
  **/
  skip?: number
  distinct?: Enumerable<DocumentsDistinctFieldEnum>
}


/**
 * Documents create
 */
export type DocumentsCreateArgs = {
  /**
   * Select specific fields to fetch from the Documents
  **/
  select?: XOR<DocumentsSelect, null>
  /**
   * The data needed to create a Documents.
  **/
  data: DocumentsCreateInput
}


/**
 * Documents update
 */
export type DocumentsUpdateArgs = {
  /**
   * Select specific fields to fetch from the Documents
  **/
  select?: XOR<DocumentsSelect, null>
  /**
   * The data needed to update a Documents.
  **/
  data: DocumentsUpdateInput
  /**
   * Choose, which Documents to update.
  **/
  where: DocumentsWhereUniqueInput
}


/**
 * Documents updateMany
 */
export type DocumentsUpdateManyArgs = {
  data: DocumentsUpdateManyMutationInput
  where?: DocumentsWhereInput
}


/**
 * Documents upsert
 */
export type DocumentsUpsertArgs = {
  /**
   * Select specific fields to fetch from the Documents
  **/
  select?: XOR<DocumentsSelect, null>
  /**
   * The filter to search for the Documents to update in case it exists.
  **/
  where: DocumentsWhereUniqueInput
  /**
   * In case the Documents found by the `where` argument doesn't exist, create a new Documents with this data.
  **/
  create: DocumentsCreateInput
  /**
   * In case the Documents was found with the provided `where` argument, update it with this data.
  **/
  update: DocumentsUpdateInput
}


/**
 * Documents delete
 */
export type DocumentsDeleteArgs = {
  /**
   * Select specific fields to fetch from the Documents
  **/
  select?: XOR<DocumentsSelect, null>
  /**
   * Filter which Documents to delete.
  **/
  where: DocumentsWhereUniqueInput
}


/**
 * Documents deleteMany
 */
export type DocumentsDeleteManyArgs = {
  where?: DocumentsWhereInput
}


/**
 * Documents without action
 */
export type DocumentsArgs = {
  /**
   * Select specific fields to fetch from the Documents
  **/
  select?: XOR<DocumentsSelect, null>
}



/**
 * Deep Input Types
 */


export type UserWhereInput = {
  AND?: XOR<UserWhereInput, Enumerable<UserWhereInput>>
  OR?: XOR<UserWhereInput, Enumerable<UserWhereInput>>
  NOT?: XOR<UserWhereInput, Enumerable<UserWhereInput>>
  createdAt?: XOR<DateTimeFilter, Date | string>
  firstName?: StringNullableFilter | string | null
  id?: XOR<StringFilter, string>
  lastName?: StringNullableFilter | string | null
  password?: XOR<StringFilter, string>
  roles?: StringNullableListFilter
  updatedAt?: XOR<DateTimeFilter, Date | string>
  username?: XOR<StringFilter, string>
  Project?: ProjectListRelationFilter
  Task?: TaskListRelationFilter
}

export type UserOrderByInput = {
  createdAt?: SortOrder
  firstName?: SortOrder
  id?: SortOrder
  lastName?: SortOrder
  password?: SortOrder
  roles?: SortOrder
  updatedAt?: SortOrder
  username?: SortOrder
}

export type UserWhereUniqueInput = {
  id?: string
  username?: string
}

export type ProjectWhereInput = {
  AND?: XOR<ProjectWhereInput, Enumerable<ProjectWhereInput>>
  OR?: XOR<ProjectWhereInput, Enumerable<ProjectWhereInput>>
  NOT?: XOR<ProjectWhereInput, Enumerable<ProjectWhereInput>>
  createdAt?: XOR<DateTimeFilter, Date | string>
  description?: StringNullableFilter | string | null
  dueDate?: DateTimeNullableFilter | Date | string | null
  id?: XOR<StringFilter, string>
  name?: StringNullableFilter | string | null
  owner?: XOR<UserRelationFilter, UserWhereInput>
  startDate?: DateTimeNullableFilter | Date | string | null
  updatedAt?: XOR<DateTimeFilter, Date | string>
  Task?: TaskListRelationFilter
  userId?: XOR<StringFilter, string>
}

export type ProjectOrderByInput = {
  createdAt?: SortOrder
  description?: SortOrder
  dueDate?: SortOrder
  id?: SortOrder
  name?: SortOrder
  startDate?: SortOrder
  updatedAt?: SortOrder
  userId?: SortOrder
}

export type ProjectWhereUniqueInput = {
  id?: string
}

export type TaskWhereInput = {
  AND?: XOR<TaskWhereInput, Enumerable<TaskWhereInput>>
  OR?: XOR<TaskWhereInput, Enumerable<TaskWhereInput>>
  NOT?: XOR<TaskWhereInput, Enumerable<TaskWhereInput>>
  assignedTo?: UserRelationFilter | UserWhereInput | null
  createdAt?: XOR<DateTimeFilter, Date | string>
  estimation?: IntNullableFilter | number | null
  id?: XOR<StringFilter, string>
  project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  startDate?: XOR<DateTimeFilter, Date | string>
  status?: XOR<EnumEnumStatusFilter, EnumStatus>
  title?: XOR<StringFilter, string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
  userId?: StringNullableFilter | string | null
  projectId?: XOR<StringFilter, string>
}

export type TaskOrderByInput = {
  createdAt?: SortOrder
  estimation?: SortOrder
  id?: SortOrder
  startDate?: SortOrder
  status?: SortOrder
  title?: SortOrder
  updatedAt?: SortOrder
  userId?: SortOrder
  projectId?: SortOrder
}

export type TaskWhereUniqueInput = {
  id?: string
}

export type DocumentsWhereInput = {
  AND?: XOR<DocumentsWhereInput, Enumerable<DocumentsWhereInput>>
  OR?: XOR<DocumentsWhereInput, Enumerable<DocumentsWhereInput>>
  NOT?: XOR<DocumentsWhereInput, Enumerable<DocumentsWhereInput>>
  createdAt?: XOR<DateTimeFilter, Date | string>
  id?: XOR<StringFilter, string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
}

export type DocumentsOrderByInput = {
  createdAt?: SortOrder
  id?: SortOrder
  updatedAt?: SortOrder
}

export type DocumentsWhereUniqueInput = {
  id?: string
}

export type UserCreateInput = {
  createdAt?: Date | string
  firstName?: XOR<string, null>
  id?: string
  lastName?: XOR<string, null>
  password: string
  updatedAt?: Date | string
  username: string
  roles?: XOR<UserCreaterolesInput, Enumerable<string>>
  Project?: ProjectCreateManyWithoutOwnerInput
  Task?: TaskCreateManyWithoutAssignedToInput
}

export type UserUpdateInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  firstName?: string | NullableStringFieldUpdateOperationsInput | null
  id?: XOR<string, StringFieldUpdateOperationsInput>
  lastName?: string | NullableStringFieldUpdateOperationsInput | null
  password?: XOR<string, StringFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  username?: XOR<string, StringFieldUpdateOperationsInput>
  roles?: XOR<UserUpdaterolesInput, Enumerable<string>>
  Project?: ProjectUpdateManyWithoutOwnerInput
  Task?: TaskUpdateManyWithoutAssignedToInput
}

export type UserUpdateManyMutationInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  firstName?: string | NullableStringFieldUpdateOperationsInput | null
  id?: XOR<string, StringFieldUpdateOperationsInput>
  lastName?: string | NullableStringFieldUpdateOperationsInput | null
  password?: XOR<string, StringFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  username?: XOR<string, StringFieldUpdateOperationsInput>
  roles?: XOR<UserUpdaterolesInput, Enumerable<string>>
}

export type ProjectCreateInput = {
  createdAt?: Date | string
  description?: XOR<string, null>
  dueDate?: XOR<Date | string, null>
  id?: string
  name?: XOR<string, null>
  startDate?: XOR<Date | string, null>
  updatedAt?: Date | string
  owner: UserCreateOneWithoutProjectInput
  Task?: TaskCreateManyWithoutProjectInput
}

export type ProjectUpdateInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  description?: string | NullableStringFieldUpdateOperationsInput | null
  dueDate?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  id?: XOR<string, StringFieldUpdateOperationsInput>
  name?: string | NullableStringFieldUpdateOperationsInput | null
  startDate?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  owner?: UserUpdateOneRequiredWithoutProjectInput
  Task?: TaskUpdateManyWithoutProjectInput
}

export type ProjectUpdateManyMutationInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  description?: string | NullableStringFieldUpdateOperationsInput | null
  dueDate?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  id?: XOR<string, StringFieldUpdateOperationsInput>
  name?: string | NullableStringFieldUpdateOperationsInput | null
  startDate?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type TaskCreateInput = {
  createdAt?: Date | string
  estimation?: XOR<number, null>
  id?: string
  startDate: Date | string
  status: EnumStatus
  title: string
  updatedAt?: Date | string
  assignedTo?: UserCreateOneWithoutTaskInput
  project: ProjectCreateOneWithoutTaskInput
}

export type TaskUpdateInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  estimation?: number | NullableIntFieldUpdateOperationsInput | null
  id?: XOR<string, StringFieldUpdateOperationsInput>
  startDate?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  status?: XOR<EnumStatus, EnumEnumStatusFieldUpdateOperationsInput>
  title?: XOR<string, StringFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  assignedTo?: UserUpdateOneWithoutTaskInput
  project?: ProjectUpdateOneRequiredWithoutTaskInput
}

export type TaskUpdateManyMutationInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  estimation?: number | NullableIntFieldUpdateOperationsInput | null
  id?: XOR<string, StringFieldUpdateOperationsInput>
  startDate?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  status?: XOR<EnumStatus, EnumEnumStatusFieldUpdateOperationsInput>
  title?: XOR<string, StringFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type DocumentsCreateInput = {
  createdAt?: Date | string
  id?: string
  updatedAt?: Date | string
}

export type DocumentsUpdateInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  id?: XOR<string, StringFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type DocumentsUpdateManyMutationInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  id?: XOR<string, StringFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
}

export type DateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: XOR<Date | string, NestedDateTimeFilter>
}

export type StringNullableFilter = {
  equals?: XOR<string, null>
  in?: XOR<Enumerable<string>, null>
  notIn?: XOR<Enumerable<string>, null>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: string | NestedStringNullableFilter | null
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: XOR<string, NestedStringFilter>
}

export type StringNullableListFilter = {
  equals?: XOR<Enumerable<string>, null>
}

export type ProjectListRelationFilter = {
  every?: ProjectWhereInput
  some?: ProjectWhereInput
  none?: ProjectWhereInput
}

export type TaskListRelationFilter = {
  every?: TaskWhereInput
  some?: TaskWhereInput
  none?: TaskWhereInput
}

export type DateTimeNullableFilter = {
  equals?: XOR<Date | string, null>
  in?: XOR<Enumerable<Date> | Enumerable<string>, null>
  notIn?: XOR<Enumerable<Date> | Enumerable<string>, null>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeNullableFilter | null
}

export type UserRelationFilter = {
  is?: XOR<UserWhereInput, null>
  isNot?: XOR<UserWhereInput, null>
}

export type IntNullableFilter = {
  equals?: XOR<number, null>
  in?: XOR<Enumerable<number>, null>
  notIn?: XOR<Enumerable<number>, null>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntNullableFilter | null
}

export type ProjectRelationFilter = {
  is?: ProjectWhereInput
  isNot?: ProjectWhereInput
}

export type EnumEnumStatusFilter = {
  equals?: EnumStatus
  in?: Enumerable<EnumStatus>
  notIn?: Enumerable<EnumStatus>
  not?: XOR<EnumStatus, NestedEnumEnumStatusFilter>
}

export type UserCreaterolesInput = {
  set: Enumerable<string>
}

export type ProjectCreateManyWithoutOwnerInput = {
  create?: XOR<ProjectCreateWithoutOwnerInput, Enumerable<ProjectCreateWithoutOwnerInput>>
  connect?: XOR<ProjectWhereUniqueInput, Enumerable<ProjectWhereUniqueInput>>
  connectOrCreate?: XOR<ProjectCreateOrConnectWithoutownerInput, Enumerable<ProjectCreateOrConnectWithoutownerInput>>
}

export type TaskCreateManyWithoutAssignedToInput = {
  create?: XOR<TaskCreateWithoutAssignedToInput, Enumerable<TaskCreateWithoutAssignedToInput>>
  connect?: XOR<TaskWhereUniqueInput, Enumerable<TaskWhereUniqueInput>>
  connectOrCreate?: XOR<TaskCreateOrConnectWithoutassignedToInput, Enumerable<TaskCreateOrConnectWithoutassignedToInput>>
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: XOR<string, null>
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type UserUpdaterolesInput = {
  set: Enumerable<string>
}

export type ProjectUpdateManyWithoutOwnerInput = {
  create?: XOR<ProjectCreateWithoutOwnerInput, Enumerable<ProjectCreateWithoutOwnerInput>>
  connect?: XOR<ProjectWhereUniqueInput, Enumerable<ProjectWhereUniqueInput>>
  set?: XOR<ProjectWhereUniqueInput, Enumerable<ProjectWhereUniqueInput>>
  disconnect?: XOR<ProjectWhereUniqueInput, Enumerable<ProjectWhereUniqueInput>>
  delete?: XOR<ProjectWhereUniqueInput, Enumerable<ProjectWhereUniqueInput>>
  update?: XOR<ProjectUpdateWithWhereUniqueWithoutOwnerInput, Enumerable<ProjectUpdateWithWhereUniqueWithoutOwnerInput>>
  updateMany?: XOR<ProjectUpdateManyWithWhereWithoutOwnerInput, Enumerable<ProjectUpdateManyWithWhereWithoutOwnerInput>>
  deleteMany?: XOR<ProjectScalarWhereInput, Enumerable<ProjectScalarWhereInput>>
  upsert?: XOR<ProjectUpsertWithWhereUniqueWithoutOwnerInput, Enumerable<ProjectUpsertWithWhereUniqueWithoutOwnerInput>>
  connectOrCreate?: XOR<ProjectCreateOrConnectWithoutownerInput, Enumerable<ProjectCreateOrConnectWithoutownerInput>>
}

export type TaskUpdateManyWithoutAssignedToInput = {
  create?: XOR<TaskCreateWithoutAssignedToInput, Enumerable<TaskCreateWithoutAssignedToInput>>
  connect?: XOR<TaskWhereUniqueInput, Enumerable<TaskWhereUniqueInput>>
  set?: XOR<TaskWhereUniqueInput, Enumerable<TaskWhereUniqueInput>>
  disconnect?: XOR<TaskWhereUniqueInput, Enumerable<TaskWhereUniqueInput>>
  delete?: XOR<TaskWhereUniqueInput, Enumerable<TaskWhereUniqueInput>>
  update?: XOR<TaskUpdateWithWhereUniqueWithoutAssignedToInput, Enumerable<TaskUpdateWithWhereUniqueWithoutAssignedToInput>>
  updateMany?: XOR<TaskUpdateManyWithWhereWithoutAssignedToInput, Enumerable<TaskUpdateManyWithWhereWithoutAssignedToInput>>
  deleteMany?: XOR<TaskScalarWhereInput, Enumerable<TaskScalarWhereInput>>
  upsert?: XOR<TaskUpsertWithWhereUniqueWithoutAssignedToInput, Enumerable<TaskUpsertWithWhereUniqueWithoutAssignedToInput>>
  connectOrCreate?: XOR<TaskCreateOrConnectWithoutassignedToInput, Enumerable<TaskCreateOrConnectWithoutassignedToInput>>
}

export type UserCreateOneWithoutProjectInput = {
  create?: UserCreateWithoutProjectInput
  connect?: UserWhereUniqueInput
  connectOrCreate?: UserCreateOrConnectWithoutProjectInput
}

export type TaskCreateManyWithoutProjectInput = {
  create?: XOR<TaskCreateWithoutProjectInput, Enumerable<TaskCreateWithoutProjectInput>>
  connect?: XOR<TaskWhereUniqueInput, Enumerable<TaskWhereUniqueInput>>
  connectOrCreate?: XOR<TaskCreateOrConnectWithoutprojectInput, Enumerable<TaskCreateOrConnectWithoutprojectInput>>
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: XOR<Date | string, null>
}

export type UserUpdateOneRequiredWithoutProjectInput = {
  create?: UserCreateWithoutProjectInput
  connect?: UserWhereUniqueInput
  update?: UserUpdateWithoutProjectInput
  upsert?: UserUpsertWithoutProjectInput
  connectOrCreate?: UserCreateOrConnectWithoutProjectInput
}

export type TaskUpdateManyWithoutProjectInput = {
  create?: XOR<TaskCreateWithoutProjectInput, Enumerable<TaskCreateWithoutProjectInput>>
  connect?: XOR<TaskWhereUniqueInput, Enumerable<TaskWhereUniqueInput>>
  set?: XOR<TaskWhereUniqueInput, Enumerable<TaskWhereUniqueInput>>
  disconnect?: XOR<TaskWhereUniqueInput, Enumerable<TaskWhereUniqueInput>>
  delete?: XOR<TaskWhereUniqueInput, Enumerable<TaskWhereUniqueInput>>
  update?: XOR<TaskUpdateWithWhereUniqueWithoutProjectInput, Enumerable<TaskUpdateWithWhereUniqueWithoutProjectInput>>
  updateMany?: XOR<TaskUpdateManyWithWhereWithoutProjectInput, Enumerable<TaskUpdateManyWithWhereWithoutProjectInput>>
  deleteMany?: XOR<TaskScalarWhereInput, Enumerable<TaskScalarWhereInput>>
  upsert?: XOR<TaskUpsertWithWhereUniqueWithoutProjectInput, Enumerable<TaskUpsertWithWhereUniqueWithoutProjectInput>>
  connectOrCreate?: XOR<TaskCreateOrConnectWithoutprojectInput, Enumerable<TaskCreateOrConnectWithoutprojectInput>>
}

export type UserCreateOneWithoutTaskInput = {
  create?: UserCreateWithoutTaskInput
  connect?: UserWhereUniqueInput
  connectOrCreate?: UserCreateOrConnectWithoutTaskInput
}

export type ProjectCreateOneWithoutTaskInput = {
  create?: ProjectCreateWithoutTaskInput
  connect?: ProjectWhereUniqueInput
  connectOrCreate?: ProjectCreateOrConnectWithoutTaskInput
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: XOR<number, null>
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EnumEnumStatusFieldUpdateOperationsInput = {
  set?: EnumStatus
}

export type UserUpdateOneWithoutTaskInput = {
  create?: UserCreateWithoutTaskInput
  connect?: UserWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: UserUpdateWithoutTaskInput
  upsert?: UserUpsertWithoutTaskInput
  connectOrCreate?: UserCreateOrConnectWithoutTaskInput
}

export type ProjectUpdateOneRequiredWithoutTaskInput = {
  create?: ProjectCreateWithoutTaskInput
  connect?: ProjectWhereUniqueInput
  update?: ProjectUpdateWithoutTaskInput
  upsert?: ProjectUpsertWithoutTaskInput
  connectOrCreate?: ProjectCreateOrConnectWithoutTaskInput
}

export type NestedDateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: XOR<Date | string, NestedDateTimeFilter>
}

export type NestedStringNullableFilter = {
  equals?: XOR<string, null>
  in?: XOR<Enumerable<string>, null>
  notIn?: XOR<Enumerable<string>, null>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringNullableFilter | null
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: XOR<string, NestedStringFilter>
}

export type NestedDateTimeNullableFilter = {
  equals?: XOR<Date | string, null>
  in?: XOR<Enumerable<Date> | Enumerable<string>, null>
  notIn?: XOR<Enumerable<Date> | Enumerable<string>, null>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeNullableFilter | null
}

export type NestedIntNullableFilter = {
  equals?: XOR<number, null>
  in?: XOR<Enumerable<number>, null>
  notIn?: XOR<Enumerable<number>, null>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntNullableFilter | null
}

export type NestedEnumEnumStatusFilter = {
  equals?: EnumStatus
  in?: Enumerable<EnumStatus>
  notIn?: Enumerable<EnumStatus>
  not?: XOR<EnumStatus, NestedEnumEnumStatusFilter>
}

export type ProjectCreateWithoutOwnerInput = {
  createdAt?: Date | string
  description?: XOR<string, null>
  dueDate?: XOR<Date | string, null>
  id?: string
  name?: XOR<string, null>
  startDate?: XOR<Date | string, null>
  updatedAt?: Date | string
  Task?: TaskCreateManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutownerInput = {
  where: ProjectWhereUniqueInput
  create: ProjectCreateWithoutOwnerInput
}

export type TaskCreateWithoutAssignedToInput = {
  createdAt?: Date | string
  estimation?: XOR<number, null>
  id?: string
  startDate: Date | string
  status: EnumStatus
  title: string
  updatedAt?: Date | string
  project: ProjectCreateOneWithoutTaskInput
}

export type TaskCreateOrConnectWithoutassignedToInput = {
  where: TaskWhereUniqueInput
  create: TaskCreateWithoutAssignedToInput
}

export type ProjectUpdateWithWhereUniqueWithoutOwnerInput = {
  where: ProjectWhereUniqueInput
  data: ProjectUpdateWithoutOwnerInput
}

export type ProjectUpdateManyWithWhereWithoutOwnerInput = {
  where: ProjectScalarWhereInput
  data: ProjectUpdateManyMutationInput
}

export type ProjectScalarWhereInput = {
  AND?: XOR<ProjectScalarWhereInput, Enumerable<ProjectScalarWhereInput>>
  OR?: XOR<ProjectScalarWhereInput, Enumerable<ProjectScalarWhereInput>>
  NOT?: XOR<ProjectScalarWhereInput, Enumerable<ProjectScalarWhereInput>>
  createdAt?: XOR<DateTimeFilter, Date | string>
  description?: StringNullableFilter | string | null
  dueDate?: DateTimeNullableFilter | Date | string | null
  id?: XOR<StringFilter, string>
  name?: StringNullableFilter | string | null
  startDate?: DateTimeNullableFilter | Date | string | null
  updatedAt?: XOR<DateTimeFilter, Date | string>
  userId?: XOR<StringFilter, string>
}

export type ProjectUpsertWithWhereUniqueWithoutOwnerInput = {
  where: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutOwnerInput
  create: ProjectCreateWithoutOwnerInput
}

export type TaskUpdateWithWhereUniqueWithoutAssignedToInput = {
  where: TaskWhereUniqueInput
  data: TaskUpdateWithoutAssignedToInput
}

export type TaskUpdateManyWithWhereWithoutAssignedToInput = {
  where: TaskScalarWhereInput
  data: TaskUpdateManyMutationInput
}

export type TaskScalarWhereInput = {
  AND?: XOR<TaskScalarWhereInput, Enumerable<TaskScalarWhereInput>>
  OR?: XOR<TaskScalarWhereInput, Enumerable<TaskScalarWhereInput>>
  NOT?: XOR<TaskScalarWhereInput, Enumerable<TaskScalarWhereInput>>
  createdAt?: XOR<DateTimeFilter, Date | string>
  estimation?: IntNullableFilter | number | null
  id?: XOR<StringFilter, string>
  startDate?: XOR<DateTimeFilter, Date | string>
  status?: XOR<EnumEnumStatusFilter, EnumStatus>
  title?: XOR<StringFilter, string>
  updatedAt?: XOR<DateTimeFilter, Date | string>
  userId?: StringNullableFilter | string | null
  projectId?: XOR<StringFilter, string>
}

export type TaskUpsertWithWhereUniqueWithoutAssignedToInput = {
  where: TaskWhereUniqueInput
  update: TaskUpdateWithoutAssignedToInput
  create: TaskCreateWithoutAssignedToInput
}

export type UserCreateWithoutProjectInput = {
  createdAt?: Date | string
  firstName?: XOR<string, null>
  id?: string
  lastName?: XOR<string, null>
  password: string
  updatedAt?: Date | string
  username: string
  roles?: XOR<UserCreaterolesInput, Enumerable<string>>
  Task?: TaskCreateManyWithoutAssignedToInput
}

export type UserCreateOrConnectWithoutProjectInput = {
  where: UserWhereUniqueInput
  create: UserCreateWithoutProjectInput
}

export type TaskCreateWithoutProjectInput = {
  createdAt?: Date | string
  estimation?: XOR<number, null>
  id?: string
  startDate: Date | string
  status: EnumStatus
  title: string
  updatedAt?: Date | string
  assignedTo?: UserCreateOneWithoutTaskInput
}

export type TaskCreateOrConnectWithoutprojectInput = {
  where: TaskWhereUniqueInput
  create: TaskCreateWithoutProjectInput
}

export type UserUpdateWithoutProjectInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  firstName?: string | NullableStringFieldUpdateOperationsInput | null
  id?: XOR<string, StringFieldUpdateOperationsInput>
  lastName?: string | NullableStringFieldUpdateOperationsInput | null
  password?: XOR<string, StringFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  username?: XOR<string, StringFieldUpdateOperationsInput>
  roles?: XOR<UserUpdaterolesInput, Enumerable<string>>
  Task?: TaskUpdateManyWithoutAssignedToInput
}

export type UserUpsertWithoutProjectInput = {
  update: UserUpdateWithoutProjectInput
  create: UserCreateWithoutProjectInput
}

export type TaskUpdateWithWhereUniqueWithoutProjectInput = {
  where: TaskWhereUniqueInput
  data: TaskUpdateWithoutProjectInput
}

export type TaskUpdateManyWithWhereWithoutProjectInput = {
  where: TaskScalarWhereInput
  data: TaskUpdateManyMutationInput
}

export type TaskUpsertWithWhereUniqueWithoutProjectInput = {
  where: TaskWhereUniqueInput
  update: TaskUpdateWithoutProjectInput
  create: TaskCreateWithoutProjectInput
}

export type UserCreateWithoutTaskInput = {
  createdAt?: Date | string
  firstName?: XOR<string, null>
  id?: string
  lastName?: XOR<string, null>
  password: string
  updatedAt?: Date | string
  username: string
  roles?: XOR<UserCreaterolesInput, Enumerable<string>>
  Project?: ProjectCreateManyWithoutOwnerInput
}

export type UserCreateOrConnectWithoutTaskInput = {
  where: UserWhereUniqueInput
  create: UserCreateWithoutTaskInput
}

export type ProjectCreateWithoutTaskInput = {
  createdAt?: Date | string
  description?: XOR<string, null>
  dueDate?: XOR<Date | string, null>
  id?: string
  name?: XOR<string, null>
  startDate?: XOR<Date | string, null>
  updatedAt?: Date | string
  owner: UserCreateOneWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutTaskInput = {
  where: ProjectWhereUniqueInput
  create: ProjectCreateWithoutTaskInput
}

export type UserUpdateWithoutTaskInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  firstName?: string | NullableStringFieldUpdateOperationsInput | null
  id?: XOR<string, StringFieldUpdateOperationsInput>
  lastName?: string | NullableStringFieldUpdateOperationsInput | null
  password?: XOR<string, StringFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  username?: XOR<string, StringFieldUpdateOperationsInput>
  roles?: XOR<UserUpdaterolesInput, Enumerable<string>>
  Project?: ProjectUpdateManyWithoutOwnerInput
}

export type UserUpsertWithoutTaskInput = {
  update: UserUpdateWithoutTaskInput
  create: UserCreateWithoutTaskInput
}

export type ProjectUpdateWithoutTaskInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  description?: string | NullableStringFieldUpdateOperationsInput | null
  dueDate?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  id?: XOR<string, StringFieldUpdateOperationsInput>
  name?: string | NullableStringFieldUpdateOperationsInput | null
  startDate?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  owner?: UserUpdateOneRequiredWithoutProjectInput
}

export type ProjectUpsertWithoutTaskInput = {
  update: ProjectUpdateWithoutTaskInput
  create: ProjectCreateWithoutTaskInput
}

export type ProjectUpdateWithoutOwnerInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  description?: string | NullableStringFieldUpdateOperationsInput | null
  dueDate?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  id?: XOR<string, StringFieldUpdateOperationsInput>
  name?: string | NullableStringFieldUpdateOperationsInput | null
  startDate?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  Task?: TaskUpdateManyWithoutProjectInput
}

export type TaskUpdateWithoutAssignedToInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  estimation?: number | NullableIntFieldUpdateOperationsInput | null
  id?: XOR<string, StringFieldUpdateOperationsInput>
  startDate?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  status?: XOR<EnumStatus, EnumEnumStatusFieldUpdateOperationsInput>
  title?: XOR<string, StringFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  project?: ProjectUpdateOneRequiredWithoutTaskInput
}

export type TaskUpdateWithoutProjectInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  estimation?: number | NullableIntFieldUpdateOperationsInput | null
  id?: XOR<string, StringFieldUpdateOperationsInput>
  startDate?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  status?: XOR<EnumStatus, EnumEnumStatusFieldUpdateOperationsInput>
  title?: XOR<string, StringFieldUpdateOperationsInput>
  updatedAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  assignedTo?: UserUpdateOneWithoutTaskInput
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
